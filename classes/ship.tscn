[gd_scene load_steps=9 format=3 uid="uid://c7yejb1twgq1y"]

[ext_resource type="Texture2D" uid="uid://c4chsk31llci8" path="res://assets/healthbar_end.png" id="1_tfon3"]
[ext_resource type="Texture2D" uid="uid://dbigg863742sn" path="res://assets/green_healthbar.png" id="2_aeh01"]
[ext_resource type="Texture2D" uid="uid://dd8re0wqfaaa7" path="res://assets/grey_healthbar.png" id="3_g6sop"]
[ext_resource type="Texture2D" uid="uid://7767gb3rfixl" path="res://assets/crosshair.png" id="4_alqo5"]
[ext_resource type="Texture2D" uid="uid://cve2sky2a081b" path="res://assets/shield.png" id="4_pe2co"]
[ext_resource type="Theme" uid="uid://6ftdqmtb2drx" path="res://assets/theme2.tres" id="6_qspgc"]
[ext_resource type="Texture2D" uid="uid://bhdxhvy4tjrwk" path="res://assets/Mouse_Right_Key_Light.png" id="9_tacqa"]

[sub_resource type="GDScript" id="GDScript_fa4x3"]
script/source = "extends Node3D



var ship_name := \"\"
var color_scheme : Array[StandardMaterial3D]
var mass := 0.0
var size := Vector3.ZERO
var fuel_capacity := 0.0
var cargo_capacity := 0.0

var max_speed := 0.0
var thrust := Vector3.ZERO

var secondaries := []
var ready_secondary
var secondary_use_time := 0

var max_health := 0.0
var health := 0.0
var attack_speed := 0.0
var attack_damage := 0.0

var max_shields := 0
var shields := 0
var stored_shield := 0.0

var velocity := Vector3.ZERO
var fire_time := 0
var thrust_directions := Vector3i.ZERO
var engine_audio
var destroyed := false



@onready var camera := $Camera/Camera3D



#region setup



func load_data(data : Dictionary, new_name : String):
	color_scheme = []
	mass = 0
	destroyed = false
	for child in get_children():
		if child is StaticBody3D:
			child.free()
	
	ship_name = new_name
	
	if data.has(\"Camera Position\"):
		camera.position = Vector3(data[\"Camera Position\"][\"X\"], data[\"Camera Position\"][\"Y\"], data[\"Camera Position\"][\"Z\"])
	
	for color in data[\"Colors\"]:
		var material = StandardMaterial3D.new()
		material.albedo_color = Color(color[\"R\"], color[\"G\"], color[\"B\"])
		material.roughness = color[\"Roughness\"]
		material.metallic = color[\"Metallic\"]
		color_scheme.append(material)
	
	
	for part in data[\"Parts\"]:
		if GameManager.part_data.has(part[\"Type\"]):
			var new_part = load(GameManager.part_data[part[\"Type\"]][\"file\"]).instantiate()
			new_part.color_indexes = part[\"Color Indexes\"]
			add_child(new_part)
			new_part.position = Vector3(part[\"Position\"][\"X\"], part[\"Position\"][\"Y\"], part[\"Position\"][\"Z\"])
			new_part.rotation = Vector3(part[\"Rotation\"][\"X\"], part[\"Rotation\"][\"Y\"], part[\"Rotation\"][\"Z\"])
	
	calculate_stats()



func save_data():
	var new_file = {\"Camera Position\": {\"X\": camera.position.x, \"Y\": camera.position.y, \"Z\": camera.position.z}, \"Colors\": [], \"Parts\": [], \"Name\": ship_name}
	
	for material in color_scheme:
		new_file[\"Colors\"].append({\"R\": material.albedo_color.r, \"G\": material.albedo_color.g, \"B\": material.albedo_color.b, \"Roughness\": material.roughness, \"Metallic\": material.metallic})
	
	for child in get_children():
		if !child is StaticBody3D:
			continue
		new_file[\"Parts\"].append({\"Type\": child.type, \"Position\": {\"X\": child.position.x, \"Y\": child.position.y, \"Z\": child.position.z}, \"Rotation\": {\"X\": child.rotation.x, \"Y\": child.rotation.y, \"Z\": child.rotation.z}, \"Color Indexes\": child.color_indexes})
	
	return new_file



func calculate_stats(reset_hp := true):
	mass = 0
	size = Vector3.ZERO
	if reset_hp:
		health = 0
		max_health = 0
		stored_shield = 0
		shields = 0
	fuel_capacity = 0
	cargo_capacity = 0
	max_speed = 0
	thrust = Vector3.ZERO
	attack_damage = 3
	attack_speed = 0
	max_shields = 0
	
	for part in get_children():
		if !part is StaticBody3D:
			continue
		
		mass += part.mass
		if part.position.x > size.x:
			size.x = part.position.x
		if part.position.y < -size.y:
			size.y = -part.position.y
		if part.position.z < -size.z:
			size.z = -part.position.z
		if reset_hp:
			health += part.health
			max_health += part.health
		
		if part.attributes.has(\"Thrust\"):
			thrust += abs(part.basis * part.attributes[\"Thrust\"])
		
		if part.attributes.has(\"Fuel\"):
			fuel_capacity += part.attributes[\"Fuel\"]
		
		if part.attributes.has(\"Attack Speed\"):
			attack_speed += part.attributes[\"Attack Speed\"]
		
		if part.attributes.has(\"Attack Damage\"):
			attack_damage += part.attributes[\"Attack Damage\"]
		
		if part.attributes.has(\"Shields\"):
			max_shields += part.attributes[\"Shields\"]
		
		if part.attributes.has(\"Cargo\"):
			cargo_capacity += part.attributes[\"Cargo\"]
		
		if \"use_secondary\" in part:
			secondaries.append(part)
	
	thrust = thrust * 20 / mass
	max_speed = 10 + thrust.z
	
	if reset_hp:
		shields = max_shields



func reset():
	global_position = Vector3.ZERO
	global_rotation = Vector3.ZERO
	velocity = Vector3.ZERO
	$Camera.rotation = Vector3.ZERO



#endregion



func _input(event):
	if GameManager.paused or GameManager.input_locked:
		return
	if event is InputEventMouseMotion and GameManager.game_state == GameManager.states.combat:
		$Camera.global_rotate($Camera.global_basis.y.normalized(), event.relative.x * (0.001 if GameManager.settings.invert_x else -0.001) * GameManager.settings.sensitivity)
		$Camera.global_rotate($Camera.global_basis.x.normalized(), event.relative.y * (0.001 if GameManager.settings.invert_y else -0.001) * GameManager.settings.sensitivity)



func _process(delta):
	$Camera.global_position = global_position
	
	if GameManager.game_state == GameManager.states.map or GameManager.game_state == GameManager.states.menu:
		hide()
	else:
		show()
	
	if !GameManager.game_state == GameManager.states.combat:
		$VBoxContainer/Healthbar.hide()
		$\"secondary prompt\".hide()
		$VBoxContainer/Shields.hide()
		$TextureRect.hide()
		thrust_directions = Vector3i.ZERO
		if engine_audio != null:
			engine_audio.queue_free()
		return
	
	camera.make_current()
	
	$VBoxContainer/Healthbar.show()
	$TextureRect.show()
	if is_equal_approx(health, max_health):
		$VBoxContainer/Healthbar/TextureRect3.hide()
	else:
		$VBoxContainer/Healthbar/TextureRect3.show()
		$VBoxContainer/Healthbar/TextureRect2.size_flags_stretch_ratio = health
		$VBoxContainer/Healthbar/TextureRect3.size_flags_stretch_ratio = max_health - health
	
	if max_shields == 0:
		$VBoxContainer/Shields.hide()
	else:
		$VBoxContainer/Shields.show()
		for child in $VBoxContainer/Shields.get_children():
			child.hide()
		for i in range(shields):
			if i < 6:
				$VBoxContainer/Shields.get_child(i).show()
	
	if !destroyed:
		global_basis = global_basis.orthonormalized().slerp($Camera.global_basis.orthonormalized(), delta * 12)
	
	if GameManager.paused or GameManager.input_locked:
		thrust_directions = Vector3i.ZERO
		if engine_audio != null:
			engine_audio.queue_free()
	else:
		if (Input.get_axis(\"Left\", \"Right\") != 0 or Input.get_axis(\"Forward\", \"Back\") != 0 or Input.get_axis(\"Down\", \"Up\") != 0):
			if engine_audio == null:
				engine_audio = load(\"res://classes/audio_player.tscn\").instantiate()
				engine_audio.start(null, \"res://fx/engines.mp3\")
		elif engine_audio != null:
			engine_audio.queue_free()
		
		thrust_directions = Vector3i(Input.get_axis(\"Left\", \"Right\"), Input.get_axis(\"Down\", \"Up\"), Input.get_axis(\"Forward\", \"Back\"))



func _physics_process(delta):
	if !GameManager.game_state == GameManager.states.combat:
		return
	
	if Input.is_action_just_pressed(\"Shoot Secondary\") and ready_secondary != null and Time.get_ticks_msec() - ready_secondary.use_time > ready_secondary.cooldown:
		secondary_use_time = Time.get_ticks_msec()
		ready_secondary.use_secondary()
		ready_secondary.readied = false
		ready_secondary = null
		$\"secondary prompt\".hide()
	
	if ready_secondary == null:
		for part in secondaries:
			if part != null and Time.get_ticks_msec() - part.use_time > part.cooldown:
				ready_secondary = part
				ready_secondary.readied = true
				$\"secondary prompt\".show()
				$\"secondary prompt/Label\".text = part.type
				break
	
	if max_shields > 0 and shields < max_shields:
		stored_shield += delta * 0.08
		if stored_shield > 1.0:
			shields += 1
			stored_shield -= 1.0
			load(\"res://classes/audio_player.tscn\").instantiate().start(null, \"res://assets/shield.mp3\")
			if shields >= max_shields:
				stored_shield = 0
	
	if Input.is_action_pressed(\"Shoot Primary\") and attack_speed > 0 and Time.get_ticks_msec() - fire_time > 1000 / attack_speed and !destroyed and !GameManager.paused and !GameManager.input_locked:
		fire_time = Time.get_ticks_msec()
		
		var audio = load(\"res://classes/audio_player.tscn\").instantiate()
		audio.start(null, \"res://fx/shoot.mp3\")
		
		var bullet = load(\"res://classes/bullet.tscn\").instantiate()
		bullet.player = true
		bullet.damage = attack_damage
		bullet.velocity = camera.global_basis.z * -500 + velocity + Vector3(randf_range(-2, 2), randf_range(-2, 2), randf_range(-2, 2))
		GameManager.add_child(bullet)
		bullet.global_position = camera.global_position - camera.global_basis.z * 10
	
	if !GameManager.paused and !GameManager.input_locked:
		velocity += global_basis.x * Input.get_axis(\"Left\", \"Right\") * delta * thrust.x
		velocity += global_basis.z * Input.get_axis(\"Forward\", \"Back\") * delta * thrust.z
		velocity += global_basis.y * Input.get_axis(\"Down\", \"Up\") * delta * thrust.y
	
	velocity = velocity.limit_length(max_speed)
	
	global_translate(velocity * delta)



func damage(amount : float, part : Node3D, knockback := Vector3.ZERO, sfx := \"\"):
	if shields > 0:
		shields -= 1
		load(\"res://classes/audio_player.tscn\").instantiate().start(null, \"res://assets/shield_break.mp3\")
		return
	
	health -= max(amount, part.health)
	if health <= 0:
		thrust = Vector3.ZERO
		destroyed = true
		GameManager.load_game(GameManager.file_number)
		GameManager.difficulty_bonus = max(0, GameManager.difficulty_bonus - 0.2)
	
	var audio = load(\"res://classes/audio_player.tscn\").instantiate()
	if !sfx.is_empty():
		audio.start(null, sfx)
	else:
		audio.start(null, \"res://fx/hit.mp3\")
	
	if part != null:
		part.destroy()
	if !destroyed:
		calculate_stats(false)
	
	velocity += knockback
"

[node name="Ship" type="Node3D" groups=["Player"]]
script = SubResource("GDScript_fa4x3")

[node name="Camera" type="Node3D" parent="."]
top_level = true

[node name="Camera3D" type="Camera3D" parent="Camera"]
transform = Transform3D(1, 0, 0, 0, 1, 2.98023e-08, 0, -2.98023e-08, 1, 0, 0, 0)

[node name="TextureRect" type="TextureRect" parent="."]
custom_minimum_size = Vector2(10, 10)
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -4.5
offset_top = -4.5
offset_right = 4.5
offset_bottom = 4.5
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("4_alqo5")
expand_mode = 1

[node name="secondary prompt" type="HBoxContainer" parent="."]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -446.0
offset_top = -51.0
offset_right = -270.0
offset_bottom = -1.0
grow_horizontal = 2
grow_vertical = 0
alignment = 1

[node name="Label" type="Label" parent="secondary prompt"]
layout_mode = 2
theme = ExtResource("6_qspgc")
theme_override_colors/font_outline_color = Color(0.25098, 0.25098, 0.25098, 1)
theme_override_constants/outline_size = 10
text = "Railgun"
horizontal_alignment = 1

[node name="TextureRect" type="TextureRect" parent="secondary prompt"]
custom_minimum_size = Vector2(50, 50)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("9_tacqa")
expand_mode = 1

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -208.0
offset_top = -141.0
offset_right = 209.0
offset_bottom = -7.0
grow_horizontal = 2
grow_vertical = 0
alignment = 2

[node name="Shields" type="HBoxContainer" parent="VBoxContainer"]
layout_mode = 2
alignment = 1

[node name="Shield" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Shield2" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Shield3" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Shield4" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Shield5" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Shield6" type="TextureRect" parent="VBoxContainer/Shields"]
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
texture = ExtResource("4_pe2co")

[node name="Healthbar" type="HBoxContainer" parent="VBoxContainer"]
layout_mode = 2
theme_override_constants/separation = 0

[node name="TextureRect" type="TextureRect" parent="VBoxContainer/Healthbar"]
custom_minimum_size = Vector2(7, 42)
layout_mode = 2
texture = ExtResource("1_tfon3")

[node name="TextureRect2" type="TextureRect" parent="VBoxContainer/Healthbar"]
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("2_aeh01")

[node name="TextureRect3" type="TextureRect" parent="VBoxContainer/Healthbar"]
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("3_g6sop")

[node name="TextureRect4" type="TextureRect" parent="VBoxContainer/Healthbar"]
custom_minimum_size = Vector2(7, 42)
layout_mode = 2
texture = ExtResource("1_tfon3")
